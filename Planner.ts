///<reference path="World.ts"/>
///<reference path="Interpreter.ts"/>
///<reference path="ShrdliteGraph.ts"/>

/**
* Planner module
*
* The goal of the Planner module is to take the interpetation(s)
* produced by the Interpreter module and to plan a sequence of actions
* for the robot to put the world into a state compatible with the
* user's command, i.e. to achieve what the user wanted.
*
* The planner should use your A* search implementation to find a plan.
*/
module Planner {

    //////////////////////////////////////////////////////////////////////
    // exported functions, classes and interfaces/types

    /**
     * Top-level driver for the Planner. Calls `planInterpretation` for each given interpretation generated by the Interpreter.
     * @param interpretations List of possible interpretations.
     * @param currentState The current state of the world.
     * @returns Augments Interpreter.InterpretationResult with a plan represented by a list of strings.
     */
    export function plan(interpretations : Interpreter.InterpretationResult[], currentState : WorldState) : PlannerResult[] {
        var errors : Error[] = [];
        var plans : PlannerResult[] = [];
        interpretations.forEach((interpretation) => {
            try {
                var result : PlannerResult = <PlannerResult>interpretation;
                result.plan = planInterpretation(result.interpretation, currentState);
                if (result.plan.length == 0) {
                    result.plan.push("That is already true!");
                }
                plans.push(result);
            } catch(err) {
                errors.push(err);
            }
        });
        if (plans.length) {
            return plans;
        } else {
            // only throw the first error found
            throw errors[0];
        }
    }

    export interface PlannerResult extends Interpreter.InterpretationResult {
        plan : string[];
    }

    export function stringify(result : PlannerResult) : string {
        return result.plan.join(", ");
    }

    //////////////////////////////////////////////////////////////////////
    // private functions

    /**
     * The core planner function. The code here is just a template;
     * you should rewrite this function entirely. In this template,
     * the code produces a dummy plan which is not connected to the
     * argument `interpretation`, but your version of the function
     * should be such that the resulting plan depends on
     * `interpretation`.
     *
     *
     * @param interpretation The logical interpretation of the user's desired goal. The plan needs to be such that by executing it, the world is put into a state that satisfies this goal.
     * @param state The current world state.
     * @returns Basically, a plan is a
     * stack of strings, which are either system utterances that
     * explain what the robot is doing (e.g. "Moving left") or actual
     * actions for the robot to perform, encoded as "l", "r", "p", or
     * "d". The code shows how to build a plan. Each step of the plan can
     * be added using the `push` method.
     */
    function planInterpretation(interpretation : Interpreter.DNFFormula, state : WorldState) : string[] {
      var goal = ((node : StateNode) => {
        for (var conjunction of interpretation) { // conjunctions connected by ORs

          var conjunctionTrue = true;
          for (var literal of conjunction) { // literals connected by ANDs
            conjunctionTrue = conjunctionTrue && literalHolds(literal, node.state);
          }

          if (conjunctionTrue)
            return true;
        }
        
        return false;
      });

      var heuristics = ((node : StateNode) => {
        var minDistance = 0;
        for (var conjunction of interpretation) { // conjunctions connected by ORs

          var distance : number = 0;
          for (var literal of conjunction) { // literals connected by ANDs
            distance = distance + 
                (literalHolds(literal, node.state) ? 0 : 1);
          }

          minDistance = distance < minDistance ? distance : minDistance;
        }
        return minDistance;
      });

      var result : SearchResult<StateNode> = aStarSearch(
          new ShrdliteGraph(),
          new StateNode(state),
          goal,
          heuristics,
          10);

      // TODO: add all actions from result to a list of strings to return and then return it
        return null;
    }

    function literalHolds(literal : Interpreter.Literal, state : WorldState) : boolean {
      return false; //TODO implement
    }
}
